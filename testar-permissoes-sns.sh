#!/bin/bash

# Script para testar permiss√µes SNS especificamente

set -e

echo "üîê Testando Permiss√µes SNS..."

# Obter IP da interface eth0
ETH0_IP=$(ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -d/ -f1 | head -1)
if [ -z "$ETH0_IP" ]; then
  ETH0_IP="localhost"
fi

ENDPOINT_BASE="http://$ETH0_IP:4566"
echo "üåê Endpoint: $ENDPOINT_BASE"

echo ""
echo "üîç 1. Verificando t√≥pico SNS..."

TOPIC_ARN="arn:aws:sns:us-east-1:000000000000:PedidosConcluidos"

# Verificar se o t√≥pico existe
if aws --endpoint-url=$ENDPOINT_BASE sns get-topic-attributes --topic-arn $TOPIC_ARN > /dev/null 2>&1; then
    echo "‚úÖ T√≥pico SNS encontrado: $TOPIC_ARN"
else
    echo "‚ùå T√≥pico SNS n√£o encontrado!"
    echo "Execute './script.sh' primeiro para criar os recursos"
    exit 1
fi

echo ""
echo "üîç 2. Verificando fun√ß√£o Lambda ProcessarPedido..."

if aws --endpoint-url=$ENDPOINT_BASE lambda get-function --function-name ProcessarPedido > /dev/null 2>&1; then
    echo "‚úÖ Fun√ß√£o Lambda ProcessarPedido encontrada"

    # Verificar configura√ß√£o da fun√ß√£o
    LAMBDA_ROLE=$(aws --endpoint-url=$ENDPOINT_BASE lambda get-function-configuration \
        --function-name ProcessarPedido \
        --query 'Role' --output text)
    echo "üîß Role da Lambda: $LAMBDA_ROLE"
else
    echo "‚ùå Fun√ß√£o Lambda ProcessarPedido n√£o encontrada!"
    exit 1
fi

echo ""
echo "üîç 3. Verificando role IAM da Lambda..."

if aws --endpoint-url=$ENDPOINT_BASE iam get-role --role-name ProcessarPedidoRole > /dev/null 2>&1; then
    echo "‚úÖ Role ProcessarPedidoRole encontrada"

    # Listar policies anexadas √† role
    echo "üìã Policies anexadas √† role:"
    aws --endpoint-url=$ENDPOINT_BASE iam list-attached-role-policies \
        --role-name ProcessarPedidoRole \
        --query 'AttachedPolicies[].PolicyName' --output table
else
    echo "‚ö†Ô∏è Role ProcessarPedidoRole n√£o encontrada (usando role padr√£o)"
fi

echo ""
echo "üîç 4. Testando publica√ß√£o manual no SNS..."

# Teste de publica√ß√£o direta
echo "Publicando mensagem de teste no SNS..."

TEST_MESSAGE="Teste de permiss√£o: Sistema funcionando corretamente!"

PUBLISH_RESULT=$(aws --endpoint-url=$ENDPOINT_BASE sns publish \
    --topic-arn $TOPIC_ARN \
    --message "$TEST_MESSAGE" \
    --subject "üß™ Teste de Permiss√£o SNS" \
    --query 'MessageId' --output text 2>&1)

if [[ $PUBLISH_RESULT == *"error"* ]] || [[ $PUBLISH_RESULT == *"denied"* ]]; then
    echo "‚ùå Erro ao publicar no SNS: $PUBLISH_RESULT"
    echo "Verificando permiss√µes..."

    # Verificar pol√≠tica do t√≥pico
    echo ""
    echo "üìã Pol√≠tica do t√≥pico SNS:"
    aws --endpoint-url=$ENDPOINT_BASE sns get-topic-attributes \
        --topic-arn $TOPIC_ARN \
        --query 'Attributes.Policy' --output text || echo "Nenhuma pol√≠tica encontrada"
else
    echo "‚úÖ Publica√ß√£o no SNS bem-sucedida!"
    echo "üìß MessageId: $PUBLISH_RESULT"
fi

echo ""
echo "üîç 5. Testando integra√ß√£o Lambda + SNS via SQS..."

# Criar mensagem de teste para simular SQS
cat > test-sqs-message.json << EOF
{
  "Records": [
    {
      "body": "{\"id\":\"test-$(date +%s)\",\"cliente\":\"Cliente Teste\",\"mesa\":99,\"itens\":[{\"nome\":\"Item Teste\",\"quantidade\":1,\"preco\":10.00}],\"status\":\"CRIADO\",\"criadoEm\":\"$(date -Iseconds)\"}",
      "messageId": "test-message-id"
    }
  ]
}
EOF

echo "Invocando Lambda ProcessarPedido com mensagem de teste..."

# Invocar Lambda diretamente para testar SNS
aws --endpoint-url=$ENDPOINT_BASE lambda invoke \
    --function-name ProcessarPedido \
    --payload file://test-sqs-message.json \
    response-sns-test.json > /dev/null 2>&1

if [ -f response-sns-test.json ]; then
    echo "üìã Resposta da Lambda:"
    cat response-sns-test.json
    echo ""

    # Verificar se houve erro
    if grep -q "errorMessage" response-sns-test.json; then
        echo "‚ùå Lambda retornou erro:"
        grep "errorMessage" response-sns-test.json
    else
        echo "‚úÖ Lambda executou sem erros"
    fi
else
    echo "‚ùå Falha ao invocar Lambda"
fi

echo ""
echo "üîç 6. Verificando logs recentes do LocalStack..."

# Verificar logs para SNS
CONTAINER_ID=$(docker ps -q --filter "name=localstack" 2>/dev/null)
if [ ! -z "$CONTAINER_ID" ]; then
    echo "üìã Logs relacionados ao SNS (√∫ltimos 20):"
    docker logs --tail=20 "$CONTAINER_ID" 2>&1 | grep -i "sns\|publish\|topic" || echo "Nenhum log de SNS encontrado"
else
    echo "‚ö†Ô∏è Container LocalStack n√£o encontrado"
fi

echo ""
echo "üîç 7. Resumo das verifica√ß√µes:"

# Verificar todos os componentes necess√°rios
echo "üìä Status dos componentes:"

# T√≥pico SNS
if aws --endpoint-url=$ENDPOINT_BASE sns get-topic-attributes --topic-arn $TOPIC_ARN > /dev/null 2>&1; then
    echo "‚úÖ T√≥pico SNS: OK"
else
    echo "‚ùå T√≥pico SNS: FALHA"
fi

# Lambda ProcessarPedido
if aws --endpoint-url=$ENDPOINT_BASE lambda get-function --function-name ProcessarPedido > /dev/null 2>&1; then
    echo "‚úÖ Lambda ProcessarPedido: OK"
else
    echo "‚ùå Lambda ProcessarPedido: FALHA"
fi

# Role IAM
if aws --endpoint-url=$ENDPOINT_BASE iam get-role --role-name ProcessarPedidoRole > /dev/null 2>&1; then
    echo "‚úÖ Role IAM: OK"
else
    echo "‚ö†Ô∏è Role IAM: Usando padr√£o do LocalStack"
fi

# Limpeza
rm -f test-sqs-message.json response-sns-test.json

echo ""
echo "üí° Dicas para resolver problemas de permiss√£o:"
echo "1. Execute './script.sh' novamente para recriar as permiss√µes"
echo "2. Verifique se o LocalStack est√° rodando: docker ps | grep localstack"
echo "3. Reinicie o LocalStack se necess√°rio: docker compose restart"
echo "4. No LocalStack, muitas permiss√µes s√£o simuladas e podem funcionar mesmo sem configura√ß√£o expl√≠cita"

echo ""
echo "‚úÖ Teste de permiss√µes SNS conclu√≠do!"
