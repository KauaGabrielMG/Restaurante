#!/bin/bash

# Script espec√≠fico para testar SNS no Sistema de Restaurante

set -e

echo "üìß Testando Sistema de Notifica√ß√µes SNS..."

# Fun√ß√£o para obter IP da m√°quina
get_machine_ip() {
    local ip=""

    # Tentar eth0 primeiro
    ip=$(ip addr show eth0 2>/dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1 | head -1)
    if [ ! -z "$ip" ] && [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "$ip"
        return 0
    fi

    # Tentar outras interfaces comuns
    for interface in eth1 enp0s3 enp0s8 wlan0 wlp2s0; do
        ip=$(ip addr show $interface 2>/dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1 | head -1)
        if [ ! -z "$ip" ] && [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "$ip"
            return 0
        fi
    done

    # Tentar usando hostname -I
    ip=$(hostname -I 2>/dev/null | awk '{print $1}')
    if [ ! -z "$ip" ] && [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "$ip"
        return 0
    fi

    return 1
}

ETH0_IP=$(get_machine_ip)

if [ -z "$ETH0_IP" ]; then
  echo "‚ùå N√£o foi poss√≠vel obter o IP da interface eth0"
  echo "üí° Tentando usar localhost como fallback..."
  ETH0_IP="localhost"
fi

echo "üåê Usando IP: $ETH0_IP"
ENDPOINT_URL="http://$ETH0_IP:4566"

# Verificar se LocalStack est√° rodando
if ! docker ps | grep -q localstack; then
    echo "‚ùå LocalStack n√£o est√° rodando!"
    echo "üí° Execute primeiro: docker compose up -d"
    exit 1
fi

echo ""
echo "üìß Teste 1: Verificar se t√≥pico SNS existe"

TOPICS=$(aws --endpoint-url=$ENDPOINT_URL sns list-topics --query 'Topics[].TopicArn' --output text 2>/dev/null || true)
TOPIC_ARN="arn:aws:sns:us-east-1:000000000000:PedidosConcluidos"

if echo "$TOPICS" | grep -q "PedidosConcluidos"; then
    echo "‚úÖ T√≥pico SNS 'PedidosConcluidos' existe"
    echo "üìß ARN: $TOPIC_ARN"
else
    echo "‚ùå T√≥pico SNS 'PedidosConcluidos' n√£o encontrado"
    echo "üí° Execute primeiro: ./script.sh"
    exit 1
fi

echo ""
echo "üìß Teste 2: Verificar atributos do t√≥pico SNS"

TOPIC_ATTRS=$(aws --endpoint-url=$ENDPOINT_URL sns get-topic-attributes \
  --topic-arn "$TOPIC_ARN" \
  --query 'Attributes' 2>/dev/null || echo "ERRO")

if [ "$TOPIC_ATTRS" != "ERRO" ] && echo "$TOPIC_ATTRS" | grep -q "TopicArn"; then
    echo "‚úÖ Atributos do t√≥pico SNS obtidos com sucesso"

    # Extrair informa√ß√µes espec√≠ficas
    POLICY=$(echo "$TOPIC_ATTRS" | grep -o '"Policy": "[^"]*"' | cut -d'"' -f4 || echo "N/A")
    OWNER=$(echo "$TOPIC_ATTRS" | grep -o '"Owner": "[^"]*"' | cut -d'"' -f4 || echo "N/A")

    echo "  üë§ Owner: $OWNER"
    echo "  üõ°Ô∏è Policy: $(echo $POLICY | head -c 50)..."
else
    echo "‚ùå Erro ao obter atributos do t√≥pico SNS"
fi

echo ""
echo "üìß Teste 3: Enviar notifica√ß√£o simples"

SIMPLE_MESSAGE="Teste de notifica√ß√£o simples - $(date)"
SIMPLE_RESULT=$(aws --endpoint-url=$ENDPOINT_URL sns publish \
  --topic-arn "$TOPIC_ARN" \
  --message "$SIMPLE_MESSAGE" \
  --subject "üß™ Teste SNS Simples" 2>/dev/null || echo "ERRO")

if [ "$SIMPLE_RESULT" != "ERRO" ] && echo "$SIMPLE_RESULT" | grep -q "MessageId"; then
    SIMPLE_MSG_ID=$(echo "$SIMPLE_RESULT" | grep -o '"MessageId": "[^"]*"' | cut -d'"' -f4)
    echo "‚úÖ Notifica√ß√£o simples enviada com sucesso"
    echo "üìß MessageId: $SIMPLE_MSG_ID"
    echo "üìù Mensagem: $SIMPLE_MESSAGE"
else
    echo "‚ùå Erro ao enviar notifica√ß√£o simples"
    echo "üîç Resposta: $SIMPLE_RESULT"
fi

echo ""
echo "üìß Teste 4: Enviar notifica√ß√£o com atributos personalizados"

PEDIDO_ID="test-$(date +%s)"
COMPLEX_MESSAGE=$(cat << EOF
{
  "pedidoId": "$PEDIDO_ID",
  "cliente": "Cliente Teste",
  "mesa": 10,
  "status": "PRONTO",
  "total": 45.90,
  "itens": ["Hamb√∫rguer", "Batata Frita", "Refrigerante"],
  "timestamp": "$(date -Iseconds)",
  "notificacao": "Seu pedido est√° pronto para retirada!"
}
EOF
)

COMPLEX_RESULT=$(aws --endpoint-url=$ENDPOINT_URL sns publish \
  --topic-arn "$TOPIC_ARN" \
  --message "$COMPLEX_MESSAGE" \
  --subject "üçΩÔ∏è Pedido $PEDIDO_ID Pronto para Retirada!" \
  --message-attributes '{
    "pedidoId": {
      "DataType": "String",
      "StringValue": "'$PEDIDO_ID'"
    },
    "cliente": {
      "DataType": "String",
      "StringValue": "Cliente Teste"
    },
    "mesa": {
      "DataType": "Number",
      "StringValue": "10"
    },
    "total": {
      "DataType": "Number",
      "StringValue": "45.90"
    },
    "tipo": {
      "DataType": "String",
      "StringValue": "PEDIDO_PRONTO"
    }
  }' 2>/dev/null || echo "ERRO")

if [ "$COMPLEX_RESULT" != "ERRO" ] && echo "$COMPLEX_RESULT" | grep -q "MessageId"; then
    COMPLEX_MSG_ID=$(echo "$COMPLEX_RESULT" | grep -o '"MessageId": "[^"]*"' | cut -d'"' -f4)
    echo "‚úÖ Notifica√ß√£o com atributos enviada com sucesso"
    echo "üìß MessageId: $COMPLEX_MSG_ID"
    echo "üìù Pedido ID: $PEDIDO_ID"
    echo "üí∞ Total: R$ 45,90"
else
    echo "‚ùå Erro ao enviar notifica√ß√£o com atributos"
    echo "üîç Resposta: $COMPLEX_RESULT"
fi

echo ""
echo "üìß Teste 5: Verificar logs de notifica√ß√µes no LocalStack"

echo "Verificando √∫ltimas notifica√ß√µes SNS nos logs..."
sleep 2  # Aguardar logs serem processados

SNS_LOGS=$(docker logs restaurante-localstack-1 2>&1 | grep -i "sns.*publish\|pedidosconcluidos" | tail -15 || true)

if [ ! -z "$SNS_LOGS" ]; then
    echo "‚úÖ Logs de notifica√ß√µes SNS encontrados"
    echo "üìä √öltimas notifica√ß√µes (√∫ltimas 10):"
    echo "$SNS_LOGS" | tail -10 | while read line; do
        echo "  üìß $(echo $line | cut -c1-100)..."
    done
else
    echo "‚ùå Nenhum log de notifica√ß√£o SNS encontrado"
    echo "üí° Verifique se o LocalStack est√° configurado corretamente"
fi

echo ""
echo "üìß Teste 6: Simular m√∫ltiplas notifica√ß√µes (carga)"

echo "Enviando 5 notifica√ß√µes em sequ√™ncia..."

for i in {1..5}; do
    BATCH_MESSAGE="Notifica√ß√£o em lote $i/5 - Pedido lote-$i-$(date +%s)"
    BATCH_RESULT=$(aws --endpoint-url=$ENDPOINT_URL sns publish \
      --topic-arn "$TOPIC_ARN" \
      --message "$BATCH_MESSAGE" \
      --subject "üì¶ Lote $i - Teste de Carga SNS" \
      --message-attributes '{
        "lote": {
          "DataType": "Number",
          "StringValue": "'$i'"
        },
        "tipo": {
          "DataType": "String",
          "StringValue": "TESTE_CARGA"
        }
      }' 2>/dev/null || echo "ERRO")

    if [ "$BATCH_RESULT" != "ERRO" ] && echo "$BATCH_RESULT" | grep -q "MessageId"; then
        BATCH_MSG_ID=$(echo "$BATCH_RESULT" | grep -o '"MessageId": "[^"]*"' | cut -d'"' -f4)
        echo "  ‚úÖ Lote $i enviado - MessageId: $BATCH_MSG_ID"
    else
        echo "  ‚ùå Erro no lote $i"
    fi

    sleep 0.5  # Pequena pausa entre envios
done

echo ""
echo "üìß Teste 7: Verificar estat√≠sticas do t√≥pico"

# Verificar se h√° alguma m√©trica dispon√≠vel (no LocalStack pode ser limitado)
TOPIC_STATS=$(aws --endpoint-url=$ENDPOINT_URL sns get-topic-attributes \
  --topic-arn "$TOPIC_ARN" \
  --query 'Attributes.{SubscriptionsConfirmed: SubscriptionsConfirmed, SubscriptionsPending: SubscriptionsPending}' \
  --output table 2>/dev/null || echo "ERRO")

if [ "$TOPIC_STATS" != "ERRO" ]; then
    echo "‚úÖ Estat√≠sticas do t√≥pico obtidas"
    echo "$TOPIC_STATS"
else
    echo "‚ö†Ô∏è Estat√≠sticas n√£o dispon√≠veis no LocalStack"
fi

echo ""
echo "üìß Teste 8: Testar notifica√ß√£o de erro/falha"

ERROR_MESSAGE=$(cat << EOF
{
  "tipo": "ERRO",
  "pedidoId": "erro-test-$(date +%s)",
  "erro": "Falha no processamento do pedido",
  "detalhes": "Sistema indispon√≠vel temporariamente",
  "timestamp": "$(date -Iseconds)",
  "acao_requerida": "Reprocessar pedido"
}
EOF
)

ERROR_RESULT=$(aws --endpoint-url=$ENDPOINT_URL sns publish \
  --topic-arn "$TOPIC_ARN" \
  --message "$ERROR_MESSAGE" \
  --subject "üö® Erro no Processamento de Pedido" \
  --message-attributes '{
    "tipo": {
      "DataType": "String",
      "StringValue": "ERRO"
    },
    "prioridade": {
      "DataType": "String",
      "StringValue": "ALTA"
    },
    "categoria": {
      "DataType": "String",
      "StringValue": "SISTEMA"
    }
  }' 2>/dev/null || echo "ERRO")

if [ "$ERROR_RESULT" != "ERRO" ] && echo "$ERROR_RESULT" | grep -q "MessageId"; then
    ERROR_MSG_ID=$(echo "$ERROR_RESULT" | grep -o '"MessageId": "[^"]*"' | cut -d'"' -f4)
    echo "‚úÖ Notifica√ß√£o de erro enviada com sucesso"
    echo "üö® MessageId: $ERROR_MSG_ID"
else
    echo "‚ùå Erro ao enviar notifica√ß√£o de erro"
fi

echo ""
echo "üìß Teste Final: Verificar logs finais e resumo"

sleep 2
FINAL_LOGS=$(docker logs restaurante-localstack-1 2>&1 | grep -i "sns.*publish" | wc -l || echo "0")
echo "üìä Total de mensagens SNS enviadas nos logs: $FINAL_LOGS"

echo ""
echo "üéâ Todos os testes SNS conclu√≠dos!"
echo ""
echo "üìä Resumo dos Testes:"
echo "  ‚úÖ Verifica√ß√£o de t√≥pico"
echo "  ‚úÖ Atributos do t√≥pico"
echo "  ‚úÖ Notifica√ß√£o simples"
echo "  ‚úÖ Notifica√ß√£o com atributos"
echo "  ‚úÖ Verifica√ß√£o de logs"
echo "  ‚úÖ Teste de carga (5 mensagens)"
echo "  ‚úÖ Estat√≠sticas do t√≥pico"
echo "  ‚úÖ Notifica√ß√£o de erro"
echo ""
echo "üí° Para ver todas as notifica√ß√µes nos logs:"
echo "   docker logs restaurante-localstack-1 2>&1 | grep -i sns"
echo ""
echo "üí° Para listar todos os t√≥picos:"
echo "   aws --endpoint-url=$ENDPOINT_URL sns list-topics"
